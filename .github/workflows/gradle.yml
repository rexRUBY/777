name: Multi-Module Build and Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      api: ${{ steps.filter.outputs.api }}
      batch: ${{ steps.filter.outputs.batch }}
      ranking: ${{ steps.filter.outputs.ranking }}
      streaming: ${{ steps.filter.outputs.streaming }}
      order: ${{ steps.filter.outputs.order }}
      alarm: ${{ steps.filter.outputs.alarm }}
      monitoring: ${{ steps.filter.outputs.monitoring }}
      front: ${{ steps.filter.outputs.front }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            api:
              - 'api/**'
              - 'docker-compose.api.yml'
              - 'common/**'
            batch:
              - 'batch/**'
              - 'docker-compose.batch.yml'
              - 'common/**'
            ranking:
              - 'ranking/**'
              - 'docker-compose.ranking.yml'
              - 'common/**'
            streaming:
              - 'streaming/**'
              - 'docker-compose.streaming.yml'
              - 'common/**'
            order:
              - 'order/**'
              - 'docker-compose.order.yml'
              - 'common/**'
            alarm:
              - 'alarm/**'
              - 'docker-compose.alarm.yml'
              - 'common/**'
            monitoring:
              - 'monitoring/**'
              - 'docker-compose.monitoring.yml'
              - 'common/**'
            front:
              - 'front/**'
              - 'docker-compose.front.yml'
              - 'common/**'

  build-and-deploy-front:
    needs: changes
    if: ${{ needs.changes.outputs.front == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Check Docker Compose Version and Install if Needed
        run: |
          if ! docker-compose --version; then
            curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
          fi

      - name: Log in to Amazon ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.FRONT_REPOSITORY_URI }}

      - name: Build and Push Front Image
        env:
          FRONT_REPOSITORY_URI: ${{ secrets.FRONT_REPOSITORY_URI }}
        run: |
          set -e
          docker-compose -f docker-compose.front.yml build
          docker-compose -f docker-compose.front.yml push

      - name: Deploy Front to ECS
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
          --service front-service --force-new-deployment
